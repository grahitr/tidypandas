self.__data = copy.deepcopy(x)
def __repr__(self):
print('Tidy dataframe with shape: {shape}'\
.format(shape = self.__data.shape))
print('First few rows:')
print(self.__data.head(10))
return ''
def to_pandas(self):
return self.__data
def get_info(self):
print('Tidy dataframe with shape: {shape}'\
.format(shape = self.__data.shape))
print('\n')
return self.__data.info()
def get_nrow(self):
return self.__data.shape[0]
def get_ncol(self):
return self.__data.shape[1]
def get_colnames(self):
return list(self.__data.columns)
def select(self, column_names, include = True):
column_names = list(column_names)
assert len(column_names) > 0
assert all([isinstance(x, str) for x in column_names])
cols = self.__data.columns.to_list()
assert all([x in cols for x in column_names])
if not include:
column_names = self.__data.columns.difference(column_names)
if len(column_names) == 0:
raise "Removing all columns is not allowed"
res = self.__data.loc[:, column_names]
return tidyDataFrame(res, check = False)
def group_by(self, column_names):
column_names = list(column_names)
assert len(column_names) > 0
assert all([isinstance(x, str) for x in column_names])
cols = self.__data.columns.to_list()
assert all([x in cols for x in column_names])
res = self.__data.groupby(column_names)
return tidyGroupedDataFrame(res, check = False)
def slice(self, row_numbers):
minval = np.min(row_numbers)
maxval = np.max(row_numbers)
assert minval >= 0 and maxval <= self.get_nrow()
res = self.__data.take(row_numbers).reset_index(drop = True)
return tidyDataFrame(res, check = False)
def arrange(self, column_names, ascending = False, na_position = 'last'):
if not isinstance(column_names, list):
column_names = [column_names]
assert len(column_names) > 0
cn = self.get_colnames()
assert all([x in cn for x in column_names])
if not isinstance(ascending, list):
isinstance(ascending, bool)
else:
assert all([isinstance(x, bool) for x in ascending])
assert len(ascending) == len(column_names)
res = self.__data.sort_values(by = column_names
, axis         = 0
, ascending    = ascending
, inplace      = False
, kind         = 'quicksort'
, na_position  = na_position
, ignore_index = True
)
return tidyDataFrame(res, check = False)
import pandas as pd
import numpy as np
iris = pd.read_csv("iris.csv",)
iris
# grouped ----------------------------------------------------------------------
iris_tidy = tidyDataFrame(iris)
iris_tidy
iris_tidy.get_info()
iris_tidy.get_ncol()
iris_tidy.get_nrow()
iris_tidy.get_colnames()
iris_tidy.to_pandas()
iris_tidy.select(['Sepal.Length', 'Species'])
iris_tidy.select(['Sepal.Length', 'Species'], include = False)
iris_tidy.slice([1, 149])
iris_tidy.group_by(['Species'])
iris_tidy.arrange(['Sepal.Length', 'Petal.Width'], ascending = [True, False])
# ungrouped --------------------------------------------------------------------
iris_tidy_grouped = tidyDataFrame(iris).group_by(['Species'])
iris_tidy_grouped
iris_tidy_grouped.get_info()
iris_tidy_grouped.get_ncol()
iris_tidy_grouped.get_nrow()
iris_tidy_grouped.get_colnames()
iris_tidy_grouped.to_pandas()
iris_tidy_grouped.select(['Sepal.Length']) # grouped columns are always kept
iris_tidy_grouped.select(['Sepal.Length', 'Species'], include = False)
iris_tidy_grouped.slice(range(3))
iris_tidy_grouped.ungroup()
iris_tidy_grouped.arrange('Sepal.Length').slice([0,1,2])
iris_tidy_grouped
iris_tidy_grouped.ungroup()
iris_tidy_grouped
iris_tidy_grouped.arrange('Sepal.Length')
iris_tidy_grouped
iris_tidy_grouped = tidyDataFrame(iris).group_by(['Species'])
iris_tidy_grouped
iris_tidy_grouped.slice(range(3))
iris_tidy_grouped.arrange(['Sepal.Length'])
import copy
class tidyGroupedDataFrame:
def __init__(self, x, check = True):
if check:
raise TypeError(
('If you want to intend work with a existing grouped pandas'
' dataframe, then consider removing the grouping structure'
' and creating an instance of tidyDataFrame'
' and then group_by'
))
self.__data = copy.deepcopy(x)
def __repr__(self):
print('Tidy grouped dataframe with shape: {shape}'\
.format(shape = self.__data.obj.shape))
print("Groupby variables: ", self.__data.grouper.names)
print("Number of groups: ", self.__data.ngroups)
print('First few rows:')
print(self.__data.obj.head(10))
return ''
def to_pandas(self):
return self.__data
def get_info(self):
print('Tidy grouped dataframe with shape: {shape}'\
.format(shape = self.__data.obj.shape))
print("Groupby variables: ", self.__data.grouper.names)
print("Number of groups: ", self.__data.ngroups)
print('\n')
return self.__data.obj.info()
def get_nrow(self):
return self.__data.obj.shape[0]
def get_ncol(self):
return self.__data.obj.shape[1]
def get_colnames(self):
return list(self.__data.obj.columns)
def select(self, column_names, include = True):
column_names = list(column_names)
assert len(column_names) == len(set(column_names))
assert len(column_names) > 0
assert all([isinstance(x, str) for x in column_names])
cols = self.__data.obj.columns.to_list()
assert all([x in cols for x in column_names])
if not include:
column_names = set(self.__data.obj.columns).difference(set(column_names))
column_names = list(column_names)
group_var_names = self.__data.grouper.names
column_names    = list(set(column_names + group_var_names))
res = (self.__data.obj.loc[:, column_names]
.groupby(group_var_names)
)
return tidyGroupedDataFrame(res, check = False)
def ungroup(self):
return tidyDataFrame(self.__data.obj, check = False)
def slice(self, row_numbers):
assert all([x >=0 for x in row_numbers])
group_var_names = self.__data.grouper.names
res = (self.__data
.take(row_numbers)
.reset_index()
.drop(columns = 'level_' + str(len(group_var_names)))
.groupby(group_var_names)
)
return tidyGroupedDataFrame(res, check = False)
def arrange(self, column_names, ascending = False, na_position = 'last'):
if not isinstance(column_names, list):
column_names = [column_names]
assert len(column_names) > 0
cn = self.get_colnames()
assert all([x in cn for x in column_names])
if not isinstance(ascending, list):
isinstance(ascending, bool)
else:
assert all([isinstance(x, bool) for x in ascending])
assert len(ascending) == len(column_names)
group_var_names = self.__data.grouper.names
res = (self.__data
.apply(lambda x: x.sort_values(by = column_names
, axis         = 0
, ascending    = ascending
, inplace      = False
, kind         = 'quicksort'
, na_position  = na_position
, ignore_index = True
)
.reset_index(drop = False)
.groupby(group_var_names)
)
return tidyGroupedDataFrame(res, check = False)
iris_tidy_grouped = tidyDatxaFrame(iris).group_by(['Species'])
iris_tidy_grouped = tidyDataFrame(iris).group_by(['Species'])
iris_tidy_grouped
iris_tidy_grouped.arrange(['Sepal.Length'])
import copy
class tidyGroupedDataFrame:
def __init__(self, x, check = True):
if check:
raise TypeError(
('If you want to intend work with a existing grouped pandas'
' dataframe, then consider removing the grouping structure'
' and creating an instance of tidyDataFrame'
' and then group_by'
))
self.__data = copy.deepcopy(x)
def __repr__(self):
print('Tidy grouped dataframe with shape: {shape}'\
.format(shape = self.__data.obj.shape))
print("Groupby variables: ", self.__data.grouper.names)
print("Number of groups: ", self.__data.ngroups)
print('First few rows:')
print(self.__data.obj.head(10))
return ''
def to_pandas(self):
return self.__data
def get_info(self):
print('Tidy grouped dataframe with shape: {shape}'\
.format(shape = self.__data.obj.shape))
print("Groupby variables: ", self.__data.grouper.names)
print("Number of groups: ", self.__data.ngroups)
print('\n')
return self.__data.obj.info()
def get_nrow(self):
return self.__data.obj.shape[0]
def get_ncol(self):
return self.__data.obj.shape[1]
def get_colnames(self):
return list(self.__data.obj.columns)
def select(self, column_names, include = True):
column_names = list(column_names)
assert len(column_names) == len(set(column_names))
assert len(column_names) > 0
assert all([isinstance(x, str) for x in column_names])
cols = self.__data.obj.columns.to_list()
assert all([x in cols for x in column_names])
if not include:
column_names = set(self.__data.obj.columns).difference(set(column_names))
column_names = list(column_names)
group_var_names = self.__data.grouper.names
column_names    = list(set(column_names + group_var_names))
res = (self.__data.obj.loc[:, column_names]
.groupby(group_var_names)
)
return tidyGroupedDataFrame(res, check = False)
def ungroup(self):
return tidyDataFrame(self.__data.obj, check = False)
def slice(self, row_numbers):
assert all([x >=0 for x in row_numbers])
group_var_names = self.__data.grouper.names
res = (self.__data
.take(row_numbers)
.reset_index()
.drop(columns = 'level_' + str(len(group_var_names)))
.groupby(group_var_names)
)
return tidyGroupedDataFrame(res, check = False)
def arrange(self, column_names, ascending = False, na_position = 'last'):
if not isinstance(column_names, list):
column_names = [column_names]
assert len(column_names) > 0
cn = self.get_colnames()
assert all([x in cn for x in column_names])
if not isinstance(ascending, list):
isinstance(ascending, bool)
else:
assert all([isinstance(x, bool) for x in ascending])
assert len(ascending) == len(column_names)
group_var_names = self.__data.grouper.names
res = (self.__data
.apply(lambda x: x.sort_values(by = column_names
, axis         = 0
, ascending    = ascending
, inplace      = False
, kind         = 'quicksort'
, na_position  = na_position
, ignore_index = True
)
.reset_index(drop = True)
.groupby(group_var_names)
)
return tidyGroupedDataFrame(res, check = False)
import copy
class tidyGroupedDataFrame:
def __init__(self, x, check = True):
if check:
raise TypeError(
('If you want to intend work with a existing grouped pandas'
' dataframe, then consider removing the grouping structure'
' and creating an instance of tidyDataFrame'
' and then group_by'
))
self.__data = copy.deepcopy(x)
def __repr__(self):
print('Tidy grouped dataframe with shape: {shape}'\
.format(shape = self.__data.obj.shape))
print("Groupby variables: ", self.__data.grouper.names)
print("Number of groups: ", self.__data.ngroups)
print('First few rows:')
print(self.__data.obj.head(10))
return ''
def to_pandas(self):
return self.__data
def get_info(self):
print('Tidy grouped dataframe with shape: {shape}'\
.format(shape = self.__data.obj.shape))
print("Groupby variables: ", self.__data.grouper.names)
print("Number of groups: ", self.__data.ngroups)
print('\n')
return self.__data.obj.info()
def get_nrow(self):
return self.__data.obj.shape[0]
def get_ncol(self):
return self.__data.obj.shape[1]
def get_colnames(self):
return list(self.__data.obj.columns)
def select(self, column_names, include = True):
column_names = list(column_names)
assert len(column_names) == len(set(column_names))
assert len(column_names) > 0
assert all([isinstance(x, str) for x in column_names])
cols = self.__data.obj.columns.to_list()
assert all([x in cols for x in column_names])
if not include:
column_names = set(self.__data.obj.columns).difference(set(column_names))
column_names = list(column_names)
group_var_names = self.__data.grouper.names
column_names    = list(set(column_names + group_var_names))
res = (self.__data.obj.loc[:, column_names]
.groupby(group_var_names)
)
return tidyGroupedDataFrame(res, check = False)
def ungroup(self):
return tidyDataFrame(self.__data.obj, check = False)
def slice(self, row_numbers):
assert all([x >=0 for x in row_numbers])
group_var_names = self.__data.grouper.names
res = (self.__data
.take(row_numbers)
.reset_index()
.drop(columns = 'level_' + str(len(group_var_names)))
.groupby(group_var_names)
)
return tidyGroupedDataFrame(res, check = False)
def arrange(self, column_names, ascending = False, na_position = 'last'):
if not isinstance(column_names, list):
column_names = [column_names]
assert len(column_names) > 0
cn = self.get_colnames()
assert all([x in cn for x in column_names])
if not isinstance(ascending, list):
isinstance(ascending, bool)
else:
assert all([isinstance(x, bool) for x in ascending])
assert len(ascending) == len(column_names)
group_var_names = self.__data.grouper.names
print(group_var_names)
res = (self.__data
.apply(lambda x: x.sort_values(by = column_names
, axis         = 0
, ascending    = ascending
, inplace      = False
, kind         = 'quicksort'
, na_position  = na_position
, ignore_index = True
)
.reset_index(drop = True)
.groupby(group_var_names)
)
return tidyGroupedDataFrame(res, check = False)
iris_tidy_grouped.arrange(['Sepal.Length'])
iris_tidy_grouped = tidyDataFrame(iris).group_by(['Species'])
iris_tidy_grouped
iris_tidy_grouped.arrange(['Sepal.Length'])
import copy
class tidyGroupedDataFrame:
def __init__(self, x, check = True):
if check:
raise TypeError(
('If you want to intend work with a existing grouped pandas'
' dataframe, then consider removing the grouping structure'
' and creating an instance of tidyDataFrame'
' and then group_by'
))
self.__data = copy.deepcopy(x)
def __repr__(self):
print('Tidy grouped dataframe with shape: {shape}'\
.format(shape = self.__data.obj.shape))
print("Groupby variables: ", self.__data.grouper.names)
print("Number of groups: ", self.__data.ngroups)
print('First few rows:')
print(self.__data.obj.head(10))
return ''
def to_pandas(self):
return self.__data
def get_info(self):
print('Tidy grouped dataframe with shape: {shape}'\
.format(shape = self.__data.obj.shape))
print("Groupby variables: ", self.__data.grouper.names)
print("Number of groups: ", self.__data.ngroups)
print('\n')
return self.__data.obj.info()
def get_nrow(self):
return self.__data.obj.shape[0]
def get_ncol(self):
return self.__data.obj.shape[1]
def get_colnames(self):
return list(self.__data.obj.columns)
def select(self, column_names, include = True):
column_names = list(column_names)
assert len(column_names) == len(set(column_names))
assert len(column_names) > 0
assert all([isinstance(x, str) for x in column_names])
cols = self.__data.obj.columns.to_list()
assert all([x in cols for x in column_names])
if not include:
column_names = set(self.__data.obj.columns).difference(set(column_names))
column_names = list(column_names)
group_var_names = self.__data.grouper.names
column_names    = list(set(column_names + group_var_names))
res = (self.__data.obj.loc[:, column_names]
.groupby(group_var_names)
)
return tidyGroupedDataFrame(res, check = False)
def ungroup(self):
return tidyDataFrame(self.__data.obj, check = False)
def slice(self, row_numbers):
assert all([x >=0 for x in row_numbers])
group_var_names = self.__data.grouper.names
res = (self.__data
.take(row_numbers)
.reset_index()
.drop(columns = 'level_' + str(len(group_var_names)))
.groupby(group_var_names)
)
return tidyGroupedDataFrame(res, check = False)
def arrange(self, column_names, ascending = False, na_position = 'last'):
if not isinstance(column_names, list):
column_names = [column_names]
assert len(column_names) > 0
cn = self.get_colnames()
assert all([x in cn for x in column_names])
if not isinstance(ascending, list):
isinstance(ascending, bool)
else:
assert all([isinstance(x, bool) for x in ascending])
assert len(ascending) == len(column_names)
group_var_names = self.__data.grouper.names
res = (self.__data
.apply(lambda x: x.sort_values(by = column_names
, axis         = 0
, ascending    = ascending
, inplace      = False
, kind         = 'quicksort'
, na_position  = na_position
, ignore_index = True
)
.reset_index(drop = True)
.groupby(group_var_names)
)
return tidyGroupedDataFrame(res, check = False)
iris_tidy_grouped = tidyDataFrame(iris).group_by(['Species'])
iris_tidy_grouped
iris_tidy_grouped.arrange(['Sepal.Length'])
iris_tidy_grouped.arrange(['Sepal.Length']).slice([0,1,2])
print(Species)
with iris:
print(Species)
iris
with iris as r:
print(r.Species)
with iris as r:
r.Species
with iris as r:
r["Species"]
with iris as r:
r.loc["Species"]
with iris as a:
a.loc["Species"]
with iris:
iris.loc["Species"]
with iris as _:
_.loc["Species"]
iris.loc["Species"]
iris.loc[["Species"]]
iris.loc[columns = ["Species"]]
iris.loc[column = ["Species"]]
iris["Species"]
with iris as a:
a["Species"]
def something(**kwargs):
for k, v in kwargs.items():
print(k)
print(v)
somthing("a" = 1, ["a", "b"] = "c")
somthing("a" = 1)
something("a" = 1)
something(a = 1)
something(a = 1,  ["a", "b"] = "c")
something(a = 1,  (a, b) = "c")
iris_tidy = tidyDataFrame(iris)
iris_tidy
iris_tidy = tidyGroupedDataFrame(iris)
iris_tidy = tidyDataFrame(iris)
iris_tidy
iris_tidy.arrange(['Sepal.Length', 'Petal.Width'], ascending = [True, False])
iris_tidy_grouped = tidyDataFrame(iris).group_by(['Species'])
iris_tidy_grouped
iris_tidy_grouped.arrange(['Sepal.Length'])
iris_tidy_grouped.arrange(['Sepal.Length']).slice([0,1,2])
iris_tidy_grouped.arrange(['Sepal.Length'], ascending = True).slice([0,1,2])
